// Switft Chip8 Emulater
// Aaron Bonham 2016

import UIKit

func hex(_ num: Int) -> String {
    return String(num, radix: 16)
}

class chip8 {
    var memory: [Int] = Array(repeating: 0x0, count: 4096)
    var gfx: [UInt8] = Array(repeating: 0x0, count: 64 * 32)
    var V: [Int] = Array(repeating: 0x0, count: 16)
    var I: Int = 0x0
    var pc: Int = 0x0
    var opcode: Int = 0x0
    var stack: [Int] = Array(repeating: 0x0, count: 16)
    var sp: Int = 0x0
    var key: [Int] = Array(repeating: 0x0, count: 16)
    var delayTimer: Int = 0
    var drawFlag: Bool = false
    var backBuffer: UIImage?
    
    let fontSet: [Int] = [
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    ]
    
    //Test programmes taken from http://johnearnest.github.io/Octo/
    
    let smile: [Int] = [0x12, 0x08, 0x24, 0x24, 0x00, 0x81, 0x42, 0x3C, 0xA2, 0x02, 0x62, 0x00, 0xC0, 0x3F, 0xC1, 0x1F, 0xD0, 0x16, 0x72, 0x01, 0x32, 0x20, 0x12, 0x0C, 0x00, 0xE0, 0x12, 0x0A]
    
    let collision: [Int] = [0x12, 0x06, 0xF0, 0xF0, 0xF0, 0xF0, 0x60, 0x14, 0x61, 0x0A, 0xA2, 0x02, 0xD0, 0x14, 0x70, 0x02, 0x71, 0x02, 0xD0, 0x14, 0x82, 0xF0, 0x70, 0x0A, 0xF2, 0x29, 0xD0, 0x15, 0x12, 0x1C]
    
    let testcompare: [Int] = [0x12, 0x72, 0xF0, 0x29, 0xDA, 0xB5, 0x7A, 0x05, 0x60, 0x00, 0x00, 0xEE, 0x6A, 0x00, 0x7B, 0x06, 0x00, 0xEE, 0x83, 0x20, 0x83, 0x15, 0x3F, 0x01, 0x60, 0x01, 0x22, 0x02, 0x00, 0xEE, 0x63, 0x05, 0x83, 0x15, 0x3F, 0x01, 0x60, 0x01, 0x22, 0x02, 0x00, 0xEE, 0x83, 0x20, 0x83, 0x17, 0x3F, 0x01, 0x60, 0x01, 0x22, 0x02, 0x00, 0xEE, 0x63, 0x05, 0x83, 0x17, 0x3F, 0x01, 0x60, 0x01, 0x22, 0x02, 0x00, 0xEE, 0x83, 0x20, 0x83, 0x17, 0x4F, 0x01, 0x60, 0x01, 0x22, 0x02, 0x00, 0xEE, 0x63, 0x05, 0x83, 0x17, 0x4F, 0x01, 0x60, 0x01, 0x22, 0x02, 0x00, 0xEE, 0x83, 0x20, 0x83, 0x15, 0x4F, 0x01, 0x60, 0x01, 0x22, 0x02, 0x00, 0xEE, 0x63, 0x05, 0x83, 0x15, 0x4F, 0x01, 0x60, 0x01, 0x22, 0x02, 0x00, 0xEE, 0x61, 0x03, 0x62, 0x05, 0x22, 0x12, 0x61, 0x03, 0x62, 0x03, 0x22, 0x12, 0x61, 0x05, 0x62, 0x03, 0x22, 0x12, 0x61, 0x03, 0x22, 0x1E, 0x61, 0x05, 0x22, 0x1E, 0x61, 0x07, 0x22, 0x1E, 0x22, 0x0C, 0x61, 0x03, 0x62, 0x05, 0x22, 0x2A, 0x61, 0x03, 0x62, 0x03, 0x22, 0x2A, 0x61, 0x05, 0x62, 0x03, 0x22, 0x2A, 0x61, 0x03, 0x22, 0x36, 0x61, 0x05, 0x22, 0x36, 0x61, 0x07, 0x22, 0x36, 0x22, 0x0C, 0x61, 0x03, 0x62, 0x05, 0x22, 0x42, 0x61, 0x03, 0x62, 0x03, 0x22, 0x42, 0x61, 0x05, 0x62, 0x03, 0x22, 0x42, 0x61, 0x03, 0x22, 0x4E, 0x61, 0x05, 0x22, 0x4E, 0x61, 0x07, 0x22, 0x4E, 0x22, 0x0C, 0x61, 0x03, 0x62, 0x05, 0x22, 0x5A, 0x61, 0x03, 0x62, 0x03, 0x22, 0x5A, 0x61, 0x05, 0x62, 0x03, 0x22, 0x5A, 0x61, 0x03, 0x22, 0x66, 0x61, 0x05, 0x22, 0x66, 0x61, 0x07, 0x22, 0x66, 0x12, 0xF0]
    
    let testbranch: [Int] = [0x60, 0x01, 0x61, 0x03, 0x31, 0x03, 0x12, 0x0C, 0x60, 0x02, 0x70, 0x03, 0x22, 0x5E, 0x60, 0x01, 0x61, 0x03, 0x41, 0x03, 0x12, 0x1A, 0x60, 0x02, 0x70, 0x03, 0x22, 0x5E, 0x60, 0x02, 0x61, 0x03, 0x91, 0x00, 0x12, 0x2A, 0x60, 0x01, 0x70, 0x02, 0x12, 0x2E, 0x60, 0x02, 0x70, 0x04, 0x22, 0x5E, 0x60, 0x02, 0x61, 0x03, 0x8E, 0x00, 0x8E, 0x17, 0x4F, 0x01, 0x12, 0x42, 0x60, 0x01, 0x70, 0x02, 0x12, 0x46, 0x60, 0x02, 0x70, 0x04, 0x22, 0x5E, 0x60, 0x01, 0x40, 0x00, 0x12, 0x5A, 0x40, 0x02, 0x12, 0x56, 0x60, 0x07, 0x12, 0x58, 0x60, 0x03, 0x70, 0x01, 0x22, 0x5E, 0x12, 0x5C, 0xF0, 0x29, 0xDA, 0xB5, 0x7A, 0x05, 0x00, 0xEE]
    
    let testquirks: [Int] = [0x12, 0x22, 0x60, 0xFF, 0xA2, 0x2D, 0xF0, 0x55, 0x00, 0xEE, 0x60, 0x01, 0xA2, 0x2D, 0xF0, 0x55, 0x00, 0xEE, 0x60, 0xFF, 0xA2, 0x2F, 0xF0, 0x55, 0x00, 0xEE, 0x60, 0x01, 0xA2, 0x2F, 0xF0, 0x55, 0x00, 0xEE, 0x6A, 0x02, 0x6B, 0x08, 0x00, 0xE0, 0xFC, 0x29, 0xDA, 0xB5, 0x7A, 0x01, 0x7B, 0x01, 0x4A, 0x00, 0x22, 0x0A, 0x4A, 0x3B, 0x22, 0x02, 0x4B, 0x00, 0x22, 0x1A, 0x4B, 0x1A, 0x22, 0x12, 0x12, 0x26]
    
    let f8z: [Int] = [0x14, 0x14, 0x07, 0x19, 0x61, 0x81, 0x87, 0x99, 0x81, 0x81, 0x87, 0x9E, 0x98, 0x90, 0x90, 0xF0, 0xE0, 0x0E, 0x33, 0x41, 0x89, 0x99, 0x93, 0x81, 0xC1, 0x89, 0x99, 0x91, 0x83, 0xCE, 0x78, 0x60, 0x07, 0x19, 0x61, 0x81, 0x91, 0xE1, 0x43, 0x86, 0x89, 0x81, 0x81, 0x87, 0x9E, 0xF8, 0x60, 0x07, 0x0F, 0x7F, 0xFF, 0xC0, 0xE0, 0xFE, 0xFF, 0x30, 0x7E, 0xFF, 0x06, 0x1B, 0x65, 0x8F, 0xD5, 0xBD, 0xFB, 0x7E, 0x83, 0xBB, 0xBB, 0xBB, 0x83, 0x7F, 0xFD, 0x00, 0x78, 0xD6, 0xFE, 0xFD, 0xBF, 0xFF, 0xFE, 0xFF, 0x83, 0xAB, 0xAB, 0xBB, 0x82, 0xFF, 0xBF, 0x00, 0x60, 0xB8, 0xFE, 0xFB, 0x7B, 0x7F, 0xFF, 0xDF, 0x83, 0xBA, 0xA3, 0xBB, 0x83, 0x7F, 0xFD, 0x00, 0x16, 0xD9, 0xA6, 0xBB, 0xFB, 0xFF, 0xDF, 0xFE, 0x82, 0xBB, 0xAB, 0xAB, 0x83, 0x7F, 0xF9, 0x00, 0xFE, 0xFE, 0xFE, 0xE0, 0xEF, 0xEF, 0xEF, 0x00, 0xEF, 0xEF, 0xEF, 0xE0, 0xFE, 0xFE, 0xFE, 0x00, 0xEF, 0xEF, 0xEF, 0xE0, 0xEE, 0xEE, 0xEE, 0x00, 0xFE, 0xFE, 0xFE, 0xE0, 0xEE, 0xEE, 0xEE, 0x00, 0x00, 0x00, 0x60, 0xE0, 0x7E, 0xFF, 0xBD, 0xF7, 0x7E, 0x18, 0x3C, 0x5E, 0x3C, 0x3C, 0x24, 0x00, 0x00, 0x60, 0x60, 0xFE, 0xFF, 0xBD, 0xF7, 0x7E, 0x18, 0x3C, 0x5E, 0x3C, 0x3C, 0x48, 0x00, 0x00, 0x00, 0x60, 0x60, 0xFE, 0xFF, 0xBD, 0xF7, 0x7E, 0x18, 0x7E, 0x1C, 0x3C, 0x3C, 0x24, 0x00, 0x00, 0x00, 0x00, 0x60, 0xFE, 0xFF, 0xFF, 0xBD, 0x76, 0x18, 0x3C, 0x5E, 0x3C, 0x3C, 0x12, 0x00, 0x00, 0x00, 0x00, 0x06, 0x07, 0x7E, 0xFF, 0xBD, 0xEF, 0x7E, 0x18, 0x3C, 0x7A, 0x3C, 0x3C, 0x24, 0x00, 0x00, 0x06, 0x06, 0x7F, 0xFF, 0xBD, 0xEF, 0x7E, 0x18, 0x3C, 0x7A, 0x3C, 0x3C, 0x12, 0x00, 0x00, 0x00, 0x06, 0x06, 0x7F, 0xFF, 0xBD, 0xEF, 0x7E, 0x18, 0x7E, 0x38, 0x3C, 0x3C, 0x24, 0x00, 0x00, 0x00, 0x00, 0x06, 0x7F, 0xFF, 0xFF, 0xBD, 0x6E, 0x18, 0x3C, 0x7A, 0x3C, 0x3C, 0x48, 0x00, 0x00, 0x2E, 0x0A, 0x10, 0x2E, 0xFE, 0xFF, 0xFE, 0xFF, 0x02, 0x01, 0x02, 0x01, 0x62, 0x04, 0xF2, 0x15, 0xF2, 0x07, 0x32, 0x00, 0x13, 0x2A, 0x00, 0xEE, 0x60, 0x02, 0x81, 0xD0, 0x71, 0x08, 0x62, 0x01, 0xA2, 0x9A, 0xFC, 0x1E, 0xF8, 0x1E, 0xDA, 0xBF, 0xA2, 0x2F, 0xDD, 0x04, 0xA2, 0x33, 0xD1, 0x04, 0xA2, 0x37, 0xDE, 0x23, 0xA3, 0x1A, 0xF5, 0x1E, 0xF0, 0x65, 0x61, 0x09, 0xA2, 0x3A, 0x82, 0x5E, 0x82, 0x2E, 0x82, 0x2E, 0x82, 0x2E, 0xF2, 0x1E, 0xD0, 0x1F, 0x00, 0xEE, 0x60, 0x00, 0x61, 0x19, 0xA2, 0x7A, 0xC2, 0x18, 0xF2, 0x1E, 0xD0, 0x17, 0x70, 0x08, 0x30, 0x40, 0x13, 0x6A, 0x00, 0xEE, 0x61, 0x10, 0xF1, 0x18, 0x61, 0x03, 0x85, 0x12, 0xA2, 0x9A, 0xF1, 0x1E, 0x61, 0x01, 0xD0, 0x1F, 0x61, 0x10, 0xD0, 0x1F, 0x23, 0x26, 0x61, 0x01, 0xD0, 0x1F, 0x61, 0x10, 0xD0, 0x1F, 0x82, 0x00, 0x80, 0x34, 0x61, 0x3F, 0x82, 0x00, 0x82, 0x12, 0x32, 0x00, 0x13, 0x84, 0x00, 0xE0, 0x23, 0x66, 0x00, 0xEE, 0x80, 0xA0, 0x8A, 0x70, 0x67, 0x40, 0x87, 0x05, 0x75, 0xFF, 0x60, 0x40, 0x63, 0xF0, 0x13, 0x7A, 0x80, 0xA0, 0x8A, 0x70, 0x67, 0x40, 0x87, 0x04, 0x75, 0x01, 0x60, 0x00, 0x63, 0x10, 0x13, 0x7A, 0x79, 0xFF, 0x7C, 0x10, 0x60, 0x30, 0x8C, 0x02, 0x48, 0x00, 0x7A, 0x01, 0x38, 0x00, 0x7A, 0xFF, 0x00, 0xEE, 0x68, 0x40, 0x00, 0xEE, 0x48, 0x00, 0x13, 0xDE, 0x69, 0x04, 0x00, 0xEE, 0x68, 0x00, 0x00, 0xEE, 0x48, 0x40, 0x13, 0xEA, 0x69, 0x04, 0x00, 0xEE, 0x39, 0x00, 0x13, 0xCC, 0x60, 0x07, 0xE0, 0xA1, 0x13, 0xE2, 0x60, 0x09, 0xE0, 0xA1, 0x13, 0xEE, 0x60, 0x04, 0xE0, 0xA1, 0x13, 0xAC, 0x60, 0x06, 0xE0, 0xA1, 0x13, 0xBC, 0x00, 0xEE, 0x60, 0x0F, 0x61, 0x0D, 0xA2, 0x02, 0xD0, 0x1F, 0x70, 0x0C, 0x71, 0xFB, 0xA2, 0x11, 0xD0, 0x1F, 0x70, 0x0C, 0x71, 0xFB, 0xA2, 0x20, 0xD0, 0x1F, 0x60, 0x10, 0x23, 0x26, 0x70, 0xFF, 0x30, 0x00, 0x14, 0x2E, 0x00, 0xE0, 0x65, 0x00, 0x66, 0x00, 0x67, 0x00, 0x68, 0x00, 0x69, 0x00, 0x6A, 0x0A, 0x6B, 0x0A, 0x6C, 0x00, 0x6D, 0x0A, 0x6E, 0x28, 0x23, 0x66, 0x23, 0x32, 0x23, 0x32, 0x23, 0xF6, 0xA3, 0x1E, 0xF5, 0x1E, 0xF5, 0x1E, 0xF1, 0x65, 0x8D, 0x04, 0x8E, 0x14, 0x23, 0x32, 0x23, 0x26, 0x14, 0x50]
    
    let computerdraw: [Int] = [0x60, 0x10, 0x61, 0x04, 0xA2, 0xA2, 0xD0, 0x1B, 0x70, 0x08, 0xA2, 0xB8, 0xD0, 0x13, 0x70, 0x08, 0xD0, 0x13, 0x70, 0x08, 0xA2, 0xAD, 0xD0, 0x1B, 0x60, 0x10, 0x71, 0x0B, 0xA2, 0xBB, 0xD0, 0x1F, 0x70, 0x08, 0x71, 0x07, 0xA2, 0xD9, 0xD0, 0x18, 0x70, 0x08, 0xD0, 0x18, 0x70, 0x08, 0x71, 0xF9, 0xA2, 0xCA, 0xD0, 0x1F, 0x6A, 0x18, 0x6B, 0x20, 0x6C, 0x07, 0x69, 0x00, 0x68, 0x0F, 0x22, 0x54, 0x22, 0x54, 0x79, 0x01, 0x89, 0x82, 0x22, 0x54, 0x6F, 0x04, 0xFF, 0x15, 0xFF, 0x07, 0x3F, 0x00, 0x12, 0x4C, 0x12, 0x40, 0xA2, 0x62, 0xF9, 0x1E, 0xDA, 0xCF, 0xA2, 0x82, 0xF9, 0x1E, 0xDB, 0xCF, 0x00, 0xEE, 0x0F, 0x30, 0x7C, 0x7C, 0xF8, 0xF4, 0xE0, 0xE8, 0xF0, 0xE8, 0xE0, 0x68, 0x70, 0x34, 0x08, 0x00, 0x0F, 0x30, 0x7C, 0x7C, 0xF8, 0xF4, 0xE0, 0xE8, 0xF0, 0xE8, 0xE0, 0x68, 0x70, 0x34, 0x08, 0x00, 0xF0, 0x0C, 0x46, 0x66, 0x33, 0x13, 0x0B, 0x0B, 0x1F, 0x0F, 0x0F, 0x1E, 0x1E, 0x1C, 0x30, 0x00, 0xF0, 0x0C, 0x46, 0x66, 0x33, 0x13, 0x0B, 0x0B, 0x1F, 0x0F, 0x0F, 0x1E, 0x1E, 0x1C, 0x30, 0x00, 0x3F, 0x3F, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0xFC, 0xFC, 0xFC, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0xFF, 0xFF, 0xFF, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x00, 0x07, 0x1C, 0x73, 0x7F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0xFC, 0xFC, 0xFC, 0x00, 0xE0, 0xD8, 0x26, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x33, 0xCC, 0x33, 0xFF]
    
    let chip8Table = [clearOrReturnFromSub, jump, callSub, jumpIfEqual, jumpNotEqual, jumpVXEqualToVY, vXToNN, addNNToVX, cpuArithmatic, jumpVXNotEqualToVY, setIToAddress, jumpV0andNNN, randomNumberToVX, drawSprite, cpuNull, ioOP]
    
    let cpuArithmaticTable = [setVXToVYVal, vXorVY, vXandVY, vXxorVY, addVxVy, subVYfromVX, shiftRightVx, subVXfromVY, cpuNull, cpuNull, cpuNull, cpuNull, cpuNull, cpuNull, shiftLeftVx]
    
    let keypadTable: [Int] = []
    
    let ioOpTable = [cpuNull, cpuNull, cpuNull, cpuNull, cpuNull, storageOp, cpuNull, setVxToDelay, cpuNull, loadCharToI, cpuNull, cpuNull, cpuNull, cpuNull, addVxI]
    
    func initialize() {
        for (index, char) in fontSet.enumerated() {
            memory[index] = char
        }
        
        for (index, byte) in computerdraw.enumerated() {
            memory[index + 0x200] = byte
        }
        
        pc = 0x200
    }
    
    @objc func emulateCycle() {
        fetch()
        decode()
        execute()
        if drawFlag {
            drawGraphics()
            drawFlag = false
        }
        
        if delayTimer > 0 {
            delayTimer -= 1
        }
    }
    
    func fetch() {
        //                        print("fetch")
        //                print("opcode \(hex(chip.opcode)), pc \(hex(pc))")
        opcode = memory[pc] << 8 | memory[pc + 1]
        
    }
    
    func decode() {
        
    }
    
    func execute() {
        //        print("execute")
        let fn = chip8Table[(opcode & 0xF000) >> 12]
        fn(self)()
        
    }
    
    func cpuNull() {
        //        print("null - opcode \(hex(opcode))")
        pc = pc + 2
    }
    
    func clearOrReturnFromSub() {
        switch opcode {
        case 0x00EE:
            returnFromSub()
            break
        case 0x00E0:
            clearScreen()
            break
        default:
            pc = pc + 2
            break
        }
    }
    
    // 0x00EE
    
    func returnFromSub() {
        //        print("from \(hex(pc))")
        pc = stack[sp]
        //        print("pc \(hex(pc))")
        sp = sp - 1
    }
    
    func clearScreen() {
        //        print("clear screen")
        for (index, _) in gfx.enumerated() {
            gfx[index] = 0
        }
        drawFlag = true
        pc = pc + 2
    }
    
    //0x1NNN
    
    func jump() {
        pc = opcode & 0x0FFF
        //        print("jump \(hex(pc))")
    }
    
    //0x2NNN
    
    func callSub() {
        sp = sp + 1
        stack[sp] = pc + 2
        pc = opcode & 0x0FFF
        //        print("call \(hex(pc))")
    }
    
    // 3xkk - SE Vx, byte
    
    func jumpIfEqual() {
        if V[(opcode & 0x0F00) >> 8] == (opcode & 0x00FF) {
            pc += 4
            //            print("jumped (eq)")
        }
        else {
            pc = pc + 2
        }
    }
    
    /*
     4xkk - SNE Vx, byte
     Skip next instruction if Vx != kk.
     
     The interpreter compares register Vx to kk, and if they are not equal, increments the program counter by 2.
     */
    
    func jumpNotEqual() {
        if V[(opcode & 0x0F00) >> 8] != (opcode & 0x00FF) {
            pc += 4
            //            print("jumped (not eq)")
        }
        else {
            pc = pc + 2
        }
    }
    
    /*
     5xy0 - SE Vx, Vy
     Skip next instruction if Vx = Vy.
     
     The interpreter compares register Vx to register Vy, and if they are equal, increments the program counter by 2.
     */
    
    func jumpVXEqualToVY() {
        if V[(opcode & 0x0F00) >> 8] == V[(opcode & 0x00F0) >> 4] {
            pc += 4
            //            print("jumped (not eq)")
        }
        else {
            pc = pc + 2
        }
    }
    
    /*
     6xkk - LD Vx, byte
     Set Vx = kk.
     
     The interpreter puts the value kk into register Vx.
     */
    
    func vXToNN() {
        V[(opcode & 0x0F00) >> 8] = (opcode & 0x00FF)
        pc = pc + 2
    }
    
    /*
     7xkk - ADD Vx, byte
     Set Vx = Vx + kk.
     
     Adds the value kk to the value of register Vx, then stores the result in Vx.
     */
    
    func addNNToVX() {
        //        print("V - \(hex(opcode))")
        //        print("add \(V[(opcode & 0x0F00) >> 8]) + \((opcode & 0x00FF))")
        var result = V[(opcode & 0x0F00) >> 8] + (opcode & 0x00FF)
        if result > 0xFF {
            result = result - 256
        }
        V[(opcode & 0x0F00) >> 8] = result
        
        pc = pc + 2
    }
    
    // MARK: Arithmatic functions
    
    // 0x8NNN
    
    func cpuArithmatic() {
        //        print("math")
        let fn = cpuArithmaticTable[opcode & 0x000F]
        fn(self)()
    }
    
    // 0x8XY0 - Set VX to value of VY
    
    func setVXToVYVal() {
        V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x00F0) >> 4]
        pc = pc + 2
    }
    
    /*
     8xy1 - OR Vx, Vy
     Set Vx = Vx OR Vy.
     
     Performs a bitwise OR on the values of Vx and Vy, then stores the result in Vx. A bitwise OR compares the corrseponding bits from two values, and if either bit is 1, then the same bit in the result is also 1. Otherwise, it is 0.
     */
    
    func vXorVY() {
        V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x0F00) >> 8] | V[(opcode & 0x00F0) >> 4]
        pc = pc + 2
    }
    
    /*
     8xy2 - AND Vx, Vy
     Set Vx = Vx AND Vy.
     
     Performs a bitwise AND on the values of Vx and Vy, then stores the result in Vx. A bitwise AND compares the corrseponding bits from two values, and if both bits are 1, then the same bit in the result is also 1. Otherwise, it is 0.
     */
    
    func vXandVY() {
        V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x0F00) >> 8] & V[(opcode & 0x00F0) >> 4]
        pc = pc + 2
    }
    
    /*
     8xy3 - XOR Vx, Vy
     Set Vx = Vx XOR Vy.
     
     Performs a bitwise exclusive OR on the values of Vx and Vy, then stores the result in Vx. An exclusive OR compares the corrseponding bits from two values, and if the bits are not both the same, then the corresponding bit in the result is set to 1. Otherwise, it is 0.
     */
    
    func vXxorVY() {
        V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x0F00) >> 8] ^ V[(opcode & 0x00F0) >> 4]
        pc = pc + 2
    }
    
    /*
     8xy4 - ADD Vx, Vy
     Set Vx = Vx + Vy, set VF = carry.
     
     The values of Vx and Vy are added together. If the result is greater than 8 bits (i.e., > 255,) VF is set to 1, otherwise 0. Only the lowest 8 bits of the result are kept, and stored in Vx.
     */
    
    func addVxVy() {
        let result = V[(opcode & 0x0F00) >> 8] + V[(opcode & 0x00F0) >> 4]
        if result > 0xFF {
            V[0xF] = 1
        } else {
            V[0xF] = 0
        }
        V[(opcode & 0x0F00) >> 8] = result & 0xFF
        pc = pc + 2
    }
    
    // 0x8XY5 - Sub VX, VY
    /*
     8xy5 - SUB Vx, Vy
     Set Vx = Vx - Vy, set VF = NOT borrow.
     
     If Vx > Vy, then VF is set to 1, otherwise 0. Then Vy is subtracted from Vx, and the results stored in Vx.
     */
    
    func subVYfromVX() {
        if V[(opcode & 0x0F00) >> 8] >= V[(opcode & 0x00F0) >> 4] {
            V[0xF] = 1
            V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x0F00) >> 8] - V[(opcode & 0x00F0) >> 4]
        } else {
            V[0xF] = 0
            V[(opcode & 0x0F00) >> 8] = 0
        }
        //        print("sub result - \(hex(V[(opcode & 0x0F00) >> 8]))")
        
        pc = pc + 2
    }
    
    /*
     8xy6 - SHR Vx {, Vy}
     Set Vx = Vx SHR 1.
     
     If the least-significant bit of Vx is 1, then VF is set to 1, otherwise 0. Then Vx is divided by 2.
     */
    
    func shiftRightVx() {
        let result = V[(opcode & 0x0F00) >> 8]
        if result & 0x1 == 1 {
            V[0xF] = 1
        } else {
            V[0xF] = 0
        }
        V[(opcode & 0x0F00) >> 8] = result >> 1
        pc = pc + 2
    }
    
    /*
     8xy7 - SUBN Vx, Vy
     Set Vx = Vy - Vx, set VF = NOT borrow.
     
     If Vy > Vx, then VF is set to 1, otherwise 0. Then Vx is subtracted from Vy, and the results stored in Vx.
     */
    
    func subVXfromVY() {
        if V[(opcode & 0x00F0) >> 4] >= V[(opcode & 0x0F00) >> 8] {
            V[0xF] = 1
            V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x00F0) >> 4] - V[(opcode & 0x0F00) >> 8]
        } else {
            V[0xF] = 0
            V[(opcode & 0x0F00) >> 8] = 0
        }
        
        pc = pc + 2
    }
    
    /*
     8xyE - SHL Vx {, Vy}
     Set Vx = Vx SHL 1.
     
     If the most-significant bit of Vx is 1, then VF is set to 1, otherwise to 0. Then Vx is multiplied by 2.
     */
    
    func shiftLeftVx() {
        let result = V[(opcode & 0x0F00) >> 8]
        if result >> 7 == 1 {
            V[0xF] = 1
        } else {
            V[0xF] = 0
        }
        V[(opcode & 0x0F00) >> 8] = result << 1
        pc = pc + 2
    }
    
    /*
     9xy0 - SNE Vx, Vy
     Skip next instruction if Vx != Vy.
     
     The values of Vx and Vy are compared, and if they are not equal, the program counter is increased by 2.
     */
    
    func jumpVXNotEqualToVY() {
        if V[(opcode & 0x0F00) >> 8] != V[(opcode & 0x00F0) >> 4] {
            pc += 4
            //            print("jumped (not eq)")
        }
        else {
            pc = pc + 2
        }
    }
    
    
    /*
     Annn - LD I, addr
     Set I = nnn.
     
     The value of register I is set to nnn.
     */
    
    func setIToAddress() {
        I = opcode & 0x0FFF
        //        print(hex(I))
        pc = pc + 2
    }
    
    /*
     Bnnn - JP V0, addr
     Jump to location nnn + V0.
     
     The program counter is set to nnn plus the value of V0.
     */
    
    func jumpV0andNNN() {
        pc = (opcode & 0x0FFF) + V[0x0]
    }
    
    func randomNumberToVX() {
        let randomNumber = arc4random_uniform(0xFF)
        //        print("random \(hex(Int(randomNumber)))")
        V[(opcode & 0x0F00) >> 8] = (opcode & 0x00FF) & Int(randomNumber)
        pc = pc + 2
    }
    
    func drawSprite() {
        let x = V[(opcode & 0x0F00) >> 8];
        let y = V[(opcode & 0x00F0) >> 4];
        let height = opcode & 0x000F;
        var pixel: Int;
        
        V[0xF] = 0;
        for yline in 0..<height {
            pixel = memory[I + yline];
            for xline in 0..<8 {
                if((pixel & (0x80 >> xline)) != 0)
                {
                    //                    if(gfx[(x + xline + ((y + yline) * 64))] == 1) {
                    //                        V[0xF] = 1;
                    //                    }
                    var yPos = y + yline
                    var xPos = x + xline
                    yPos = yPos <= 32 ? yPos : yPos - 32
                    xPos = xPos <= 64 ? xPos : xPos - 64
                    let loc = xPos + (yPos * 64)
                    if loc < gfx.count {
                        if gfx[loc] == 1 {
                            V[0xF] = 1
                        }
                        gfx[loc] ^= 1
                    }
                }
            }
        }
        
        
        drawFlag = true;
        pc += 2;
    }
    
    /*
     Ex9E - SKP Vx
     Skip next instruction if key with the value of Vx is pressed.
     
     Checks the keyboard, and if the key corresponding to the value of Vx is currently in the down position, PC is increased by 2.
     
     
     ExA1 - SKNP Vx
     Skip next instruction if key with the value of Vx is not pressed.
     
     Checks the keyboard, and if the key corresponding to the value of Vx is currently in the up position, PC is increased by 2.
     */
    
    
    // 0xFNNN
    
    func ioOP() {
        let fn = ioOpTable[opcode & 0x000F]
        fn(self)()
    }
    
    /*
     Fx07 - LD Vx, DT
     Set Vx = delay timer value.
     
     The value of DT is placed into Vx.
     */
    
    func setVxToDelay() {
        V[(opcode & 0x0F00) >> 8] = delayTimer
        pc = pc + 2
    }
    
    /*
     Fx0A - LD Vx, K
     Wait for a key press, store the value of the key in Vx.
     
     All execution stops until a key is pressed, then the value of that key is stored in Vx.
     */
    
    /*
     Fx15 - LD DT, Vx
     Set delay timer = Vx.
     
     DT is set equal to the value of Vx.
     */
    
    func setDelayToVx() {
        delayTimer = V[(opcode & 0x0F00) >> 8]
        pc = pc + 2
    }
    
    /*
     Fx18 - LD ST, Vx
     Set sound timer = Vx.
     
     ST is set equal to the value of Vx.
     */
    
    /*
     Fx1E - ADD I, Vx
     Set I = I + Vx.
     
     The values of I and Vx are added, and the results are stored in I.
     */
    
    func addVxI() {
        I = I + V[(opcode & 0x0F00) >> 8]
        pc = pc + 2
    }
    
    /*
     Fx29 - LD F, Vx
     Set I = location of sprite for digit Vx.
     
     The value of I is set to the location for the hexadecimal sprite corresponding to the value of Vx. See section 2.4, Display, for more information on the Chip-8 hexadecimal font.
     */
    
    func loadCharToI() {
        I = V[(opcode & 0x0F00) >> 8] * 5
        pc = pc + 2
    }
    
    
    /*
     Fx33 - LD B, Vx
     Store BCD representation of Vx in memory locations I, I+1, and I+2.
     
     The interpreter takes the decimal value of Vx, and places the hundreds digit in memory at location in I, the tens digit at location I+1, and the ones digit at location I+2.
     */
    
    // Fxn5
    
    func storageOp() {
        switch opcode & 0x00FF {
        case 0x15:
            setDelayToVx()
            break
        case 0x55:
            loadFromI()
            break
        case 0x65:
            readFromI()
            break
        default:
            break
        }
    }
    
    /*
     Fx55 - LD [I], Vx
     Store registers V0 through Vx in memory starting at location I.
     
     The interpreter copies the values of registers V0 through Vx into memory, starting at the address in I.
     */
    
    func loadFromI() {
        let index = (opcode & 0x0F00) >> 8
        for idx in 0...index {
            if idx + I < memory.count {
                memory[idx + I] = V[idx]
            }
        }
        pc = pc + 2
    }
    
    /*
     Fx65 - LD Vx, [I]
     Read registers V0 through Vx from memory starting at location I.
     
     The interpreter reads values from memory starting at location I into registers V0 through Vx.
     */
    
    func readFromI() {
        let index = (opcode & 0x0F00) >> 8
        for idx in 0...index {
            if idx + I < memory.count {
                V[idx] = memory[idx + I]
            }
        }
        pc = pc + 2
    }
    
    
    // MARK: Graphics
    
    func drawGraphics() {
        
        let width  = 64 //Int(data[1]) | Int(data[0]) << 8
        let height = 32 //Int(data[3]) | Int(data[2]) << 8
        
        guard gfx.count >= width * height else {
            print("data not large enough to hold \(width)x\(height)")
            return
        }
        
        let colorSpace = CGColorSpaceCreateDeviceGray()
        
        let data = gfx.map({$0 * 255})
        let dataPointer = UnsafeMutablePointer<UInt8>.allocate(capacity: width * height)
        dataPointer.initialize(from: data)
        guard let bitmapContext = CGContext(data: dataPointer, width: width, height: height, bitsPerComponent: 8, bytesPerRow: width, space: colorSpace, bitmapInfo: CGImageAlphaInfo.none.rawValue) else {
            print("context is nil")
            return
        }
        
//        let dataPointer = UnsafeMutablePointer<UInt8>.allocate(capacity: width * height)
        //UnsafeMutablePointer<UInt8>(bitmapContext.data!)
        
//        for index in 0 ..< width * height {
//            bitmapContext.data[index] = gfx[index] * 255
//        }
        
        guard let cgImage = bitmapContext.makeImage() else {
            print("image is nil")
            return
        }
        //        self.backBuffer = NSImage(CGImage: cgImage, size: NSSize(width: 64, height: 32))
        self.backBuffer = UIImage(cgImage: cgImage)
    }
}
